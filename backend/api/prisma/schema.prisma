generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  TECH
  CUSTOMER
}

enum RouterStatus {
  NEW
  ONLINE
  OFFLINE
}

enum TicketStatus {
  PENDING
  ACTIVE
  USED
  EXPIRED
}

enum PaymentType {
  ROUTER_CONFIG
  TEMPLATE_PURCHASE
  ACCESS_SALE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ThemeTier {
  FREE
  PREMIUM
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MissionStatus {
  ASSIGNED
  IN_PROGRESS
  DONE
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  phone        String?      @unique
  passwordHash String
  role         UserRole     @default(CUSTOMER)
  createdAt    DateTime     @default(now())
  
  technician   Technician?
}

model Router {
  id              String       @id @default(uuid())
  serialNumber    String       @unique
  ssid            String
  adminSecretHash String
  fqdnOrIp        String?
  installToken    String?      @unique
  scriptPath      String?
  status          RouterStatus @default(NEW)
  createdAt       DateTime     @default(now())
  lastSeenAt      DateTime?
  
  tickets         Ticket[]
}

model Offer {
  id                 String   @id @default(uuid())
  name               String
  priceCents         Int
  durationMinutes    Int
  bandwidthLimitKbps Int?
  active             Boolean  @default(true)
  createdAt          DateTime @default(now())
  
  tickets            Ticket[]
}

model Ticket {
  id        String       @id @default(uuid())
  code      String       @unique
  offerId   String
  routerId  String
  status    TicketStatus @default(PENDING)
  expiresAt DateTime?
  createdAt DateTime     @default(now())
  
  offer     Offer        @relation(fields: [offerId], references: [id])
  router    Router       @relation(fields: [routerId], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  type           PaymentType
  amountCents    Int
  status         PaymentStatus @default(PENDING)
  idempotencyKey String        @unique
  providerRef    String?
  phoneNumber    String?
  provider       String?
  metadata       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Theme {
  id           String    @id @default(uuid())
  name         String
  tier         ThemeTier @default(FREE)
  manifestJson String
  createdAt    DateTime  @default(now())
}

model Technician {
  id        String    @id @default(uuid())
  userId    String    @unique
  kycStatus KycStatus @default(PENDING)
  kycDocument String?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id])
  missions  Mission[]
}

model Mission {
  id            String        @id @default(uuid())
  technicianId  String
  routerId      String
  status        MissionStatus @default(ASSIGNED)
  description   String?
  createdAt     DateTime      @default(now())
  completedAt   DateTime?
  
  technician    Technician    @relation(fields: [technicianId], references: [id])
}
